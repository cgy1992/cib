/*
The MIT License (MIT)

Copyright (c) 2014

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include "idmgr.h"

#include <strstream>
#include <ostream>

//////////////////////////////////////////////////////////////////////////

void CibIdMgr::init()
{
}

bool CibIdMgr::loadIds(const std::string& idsFilePath)
{
	if(!idTreeRoot_.idEnum.empty() || idTreeRoot_.childs.empty())
		return false;

	return true;
}

void CibIdMgr::assignIdsToSpecialMethods(const CppApiCompound* compound, CibIdNode& idNode)
{
	CppApiInheritInfo::const_iterator parentSetItr = compound->parents_.find(kPublic);
	if(parentSetItr == compound->parents_.end())
		return;
	const CppApiCompoundArray& pubParents = parentSetItr->second;

	for(CppApiCompoundArray::const_iterator parentItr = pubParents.begin(); parentItr != pubParents.end(); ++parentItr)
	{
		const CppApiCompound* pubParent = *parentItr;
		std::ostrstream tmpbuf;
		tmpbuf << compound->castToBaseName(pubParent) << "();\n";
		CibIdData& itemData = idNode.idEnum[std::string(tmpbuf.str(), tmpbuf.str() + tmpbuf.pcount())];
		itemData.idName = compound->castToBaseName(pubParent);
		itemData.idVal = nextCibId_++;
	}
}

void CibIdMgr::assignIds(const CppObjArray& inList, CppProgramEx& expProg, CibIdNode& idNode)
{
	if(inList.empty())
		return;
	for(CppObjArray::const_iterator itemItr = inList.begin(); itemItr != inList.end(); ++itemItr)
	{
		std::string itemUniqStr;
		CibIdData enumItemData;
		CppObj* item = *itemItr;
		if(item->isFunctionLike())
		{
			CppApiFunction* func = (CppApiFunction*) expProg.CppApiObjFromCppObj(item);
			enumItemData.idVal = nextCibId_++;
			std::ostrstream tmpbuf;
			func->emitOrigDecl(tmpbuf);
			itemUniqStr = std::string(tmpbuf.str(), tmpbuf.str() + tmpbuf.pcount());
			enumItemData.idName = func->capiName();
		}
		else if(item->isNamespaceLike())
		{
			CppCompound* compound = (CppCompound*) item;
			assignIds(compound->members_, expProg, idNode.childs[compound->name_]);
			if(compound->isClassLike())
			{
				CppApiCompound* cmp = (CppApiCompound*) expProg.CppApiObjFromCppObj(compound);
				assignIdsToSpecialMethods(cmp, idNode.childs[compound->name_]);
				enumItemData.idVal = nextCibId_++;
				std::ostrstream tmpbuf;
				tmpbuf << compound->compoundType_ << ' ' << compound->name_ << ";\n";
				itemUniqStr = std::string(tmpbuf.str(), tmpbuf.str() + tmpbuf.pcount());
				enumItemData.idName = compound->name_;
			}
		}
		if(!itemUniqStr.empty() && idNode.idEnum.find(itemUniqStr) == idNode.idEnum.end()) // Item does not exist
			idNode.idEnum[itemUniqStr] = enumItemData;
	}
}

void CibIdMgr::assignIds(CppProgramEx& expProg)
{
	// First create Ids for global functions
	const CppCompoundArray& fileDOMs = expProg.getFileDOMs();
	for(CppCompoundArray::const_iterator fileDomItr = fileDOMs.begin(); fileDomItr != fileDOMs.end(); ++fileDomItr)
	{
		const CppCompound* fileCmpound = *fileDomItr;
		assignIds(fileCmpound->members_, expProg, idTreeRoot_);
	}
}

bool CibIdMgr::saveIds(const std::string& idsFilePath) const
{
	std::ofstream cibIdStm(idsFilePath, std::ios_base::out);
	cibIdStm << "// DO NOT EDIT THIS FILE\n\n";
	cibIdStm << "#ifndef __CIBID_" << moduleName_ << "Lib_H__\n";
	cibIdStm << "#define __CIBID_" << moduleName_ << "Lib_H__\n\n";
	cibIdStm << "namespace _cib_ { namespace " << moduleName_ << "Lib {\n";
	CppWriter::Indentation indentation;
	emitIds(cibIdStm, idTreeRoot_, ++indentation);
	cibIdStm << --indentation << "}}\n\n";
	cibIdStm << "#endif\n";

	return true;
}

void CibIdMgr::emitIds(std::ostream& stm, const CibIdNode& idNode, CppWriter::Indentation indentation) const
{
	if(!idNode.idEnum.empty())
	{
		stm << indentation << "enum {\n";
		++indentation;
		for(CibIdEnum::const_iterator enmItmItr = idNode.idEnum.begin(); enmItmItr != idNode.idEnum.end(); ++enmItmItr)
		{
			stm << indentation << "//#= " << enmItmItr->first;
			stm << indentation << "kCIBID_" << enmItmItr->second.idName << " = " << enmItmItr->second.idVal << ",\n";
		}
		--indentation;
		stm << indentation << "};\n";
	}

	for(CibIdEnumTree::const_iterator childItr = idNode.childs.begin(); childItr != idNode.childs.end(); ++childItr)
	{
		stm << indentation++ << "namespace " << childItr->first << " {\n";
		emitIds(stm, childItr->second, indentation--);
		stm << indentation << "}\n";
	}
}
