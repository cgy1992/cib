// DO NOT EDIT THIS FILE

#pragma once

namespace __zz_cib_ { namespace Graphics { namespace Circle {
	 enum { __zz_cib_classid = 1 };
}}}

namespace __zz_cib_ { namespace Graphics { namespace Circle { namespace __zz_cib_GenericProxy {
	 enum { __zz_cib_classid = 2 };
}}}}

namespace __zz_cib_ { namespace Graphics { namespace Composite {
	 enum { __zz_cib_classid = 3 };
}}}

namespace __zz_cib_ { namespace Graphics { namespace Composite { namespace __zz_cib_GenericProxy {
	 enum { __zz_cib_classid = 4 };
}}}}

namespace __zz_cib_ { namespace Graphics { namespace Context {
	 enum { __zz_cib_classid = 5 };
}}}

namespace __zz_cib_ { namespace Graphics { namespace Context { namespace __zz_cib_GenericProxy {
	 enum { __zz_cib_classid = 6 };
}}}}

namespace __zz_cib_ { namespace Graphics { namespace Ellipse {
	 enum { __zz_cib_classid = 7 };
}}}

namespace __zz_cib_ { namespace Graphics { namespace Ellipse { namespace __zz_cib_GenericProxy {
	 enum { __zz_cib_classid = 8 };
}}}}

namespace __zz_cib_ { namespace Graphics { namespace LogContext {
	 enum { __zz_cib_classid = 9 };
}}}

namespace __zz_cib_ { namespace Graphics { namespace LogContext { namespace __zz_cib_GenericProxy {
	 enum { __zz_cib_classid = 10 };
}}}}

namespace __zz_cib_ { namespace Graphics { namespace Rectangle {
	 enum { __zz_cib_classid = 12 };
}}}

namespace __zz_cib_ { namespace Graphics { namespace Rectangle { namespace __zz_cib_GenericProxy {
	 enum { __zz_cib_classid = 13 };
}}}}

namespace __zz_cib_ { namespace Graphics { namespace Shape {
	 enum { __zz_cib_classid = 14 };
}}}

namespace __zz_cib_ { namespace Graphics { namespace Shape { namespace __zz_cib_GenericProxy {
	 enum { __zz_cib_classid = 15 };
}}}}

namespace __zz_cib_ { namespace Point {
	 enum { __zz_cib_classid = 11 };
}}

namespace __zz_cib_ { namespace Graphics {
	 enum { __zz_cib_next_class_id = 16 };
}}

namespace __zz_cib_ { namespace Graphics { namespace Circle { namespace __zz_cib_methodid {
	enum {
		//#= Circle(const ::Graphics::Circle&);
		__zz_cib_new_1 = 1,
		//#= ~Circle();
		__zz_cib_delete_2 = 2,
		//#= Circle(float, float, float);
		__zz_cib_new_3 = 3,
		//#= float Area() const;
		Area_4 = 4,
		//#= float Perimeter() const;
		Perimeter_5 = 5,
		//#= void Draw(::Graphics::Context*) const;
		Draw_6 = 6,
		//#= ::Graphics::Shape* CreateCircle(float, float, float);
		CreateCircle_7 = 7,
		//#= __zz_cib_cast_to___Graphics__Shape
		__zz_cib_cast_to___Graphics__Shape_8 = 8,
		//#= __zz_cib_release_proxy
		__zz_cib_release_proxy_9 = 9,
		__zz_cib_next_method_id = 10
	};
}}}}

namespace __zz_cib_ { namespace Graphics { namespace Circle { namespace __zz_cib_GenericProxy { namespace __zz_cib_methodid {
	enum {
		//#= float Area() const;
		Area_1 = 1,
		//#= float Perimeter() const;
		Perimeter_2 = 2,
		//#= void Draw(::Graphics::Context*) const;
		Draw_3 = 3,
		__zz_cib_next_method_id = 4
	};
}}}}}

namespace __zz_cib_ { namespace Graphics { namespace Composite { namespace __zz_cib_methodid {
	enum {
		//#= Composite(const ::Graphics::Composite&);
		__zz_cib_new_1 = 1,
		//#= ~Composite();
		__zz_cib_delete_2 = 2,
		//#= Composite();
		__zz_cib_new_3 = 3,
		//#= void Add(::Graphics::Shape*);
		Add_4 = 4,
		//#= size_t NumShapes() const;
		NumShapes_5 = 5,
		//#= ::Graphics::Shape* ShapeAt(size_t) const;
		ShapeAt_6 = 6,
		//#= float Area() const;
		Area_7 = 7,
		//#= float Perimeter() const;
		Perimeter_8 = 8,
		//#= void Draw(::Graphics::Context*) const;
		Draw_9 = 9,
		//#= ::Graphics::Composite* CreateCompositeOfRectAndCircle();
		CreateCompositeOfRectAndCircle_10 = 10,
		//#= __zz_cib_cast_to___Graphics__Shape
		__zz_cib_cast_to___Graphics__Shape_11 = 11,
		//#= __zz_cib_get_class_id
		__zz_cib_get_class_id_12 = 12,
		//#= __zz_cib_release_proxy
		__zz_cib_release_proxy_13 = 13,
		__zz_cib_next_method_id = 14
	};
}}}}

namespace __zz_cib_ { namespace Graphics { namespace Composite { namespace __zz_cib_GenericProxy { namespace __zz_cib_methodid {
	enum {
		//#= float Area() const;
		Area_1 = 1,
		//#= float Perimeter() const;
		Perimeter_2 = 2,
		//#= void Draw(::Graphics::Context*) const;
		Draw_3 = 3,
		__zz_cib_next_method_id = 4
	};
}}}}}

namespace __zz_cib_ { namespace Graphics { namespace Context { namespace __zz_cib_methodid {
	enum {
		//#= Context();
		__zz_cib_new_1 = 1,
		//#= void Line(float, float, float, float);
		Line_2 = 2,
		//#= void Rect(float, float, float, float);
		Rect_3 = 3,
		//#= void Circle(float, float, float);
		Circle_4 = 4,
		//#= void Ellipse(float, float, float, float);
		Ellipse_5 = 5,
		//#= ~Context();
		__zz_cib_delete_6 = 6,
		//#= __zz_cib_get_class_id
		__zz_cib_get_class_id_7 = 7,
		//#= __zz_cib_release_proxy
		__zz_cib_release_proxy_8 = 8,
		__zz_cib_next_method_id = 9
	};
}}}}

namespace __zz_cib_ { namespace Graphics { namespace Context { namespace __zz_cib_GenericProxy { namespace __zz_cib_methodid {
	enum {
		//#= void Line(float, float, float, float);
		Line_1 = 1,
		//#= void Rect(float, float, float, float);
		Rect_2 = 2,
		//#= void Circle(float, float, float);
		Circle_3 = 3,
		//#= void Ellipse(float, float, float, float);
		Ellipse_4 = 4,
		//#= ~Context();
		__zz_cib_delete_5 = 5,
		__zz_cib_next_method_id = 6
	};
}}}}}

namespace __zz_cib_ { namespace Graphics { namespace Ellipse { namespace __zz_cib_methodid {
	enum {
		//#= Ellipse(const ::Graphics::Ellipse&);
		__zz_cib_new_1 = 1,
		//#= ~Ellipse();
		__zz_cib_delete_2 = 2,
		//#= Ellipse(float, float, float, float);
		__zz_cib_new_3 = 3,
		//#= float Area() const;
		Area_4 = 4,
		//#= float Perimeter() const;
		Perimeter_5 = 5,
		//#= void Draw(::Graphics::Context*) const;
		Draw_6 = 6,
		//#= __zz_cib_cast_to___Graphics__Shape
		__zz_cib_cast_to___Graphics__Shape_7 = 7,
		//#= __zz_cib_release_proxy
		__zz_cib_release_proxy_8 = 8,
		__zz_cib_next_method_id = 9
	};
}}}}

namespace __zz_cib_ { namespace Graphics { namespace Ellipse { namespace __zz_cib_GenericProxy { namespace __zz_cib_methodid {
	enum {
		//#= float Area() const;
		Area_1 = 1,
		//#= float Perimeter() const;
		Perimeter_2 = 2,
		//#= void Draw(::Graphics::Context*) const;
		Draw_3 = 3,
		__zz_cib_next_method_id = 4
	};
}}}}}

namespace __zz_cib_ { namespace Graphics { namespace LogContext { namespace __zz_cib_methodid {
	enum {
		//#= LogContext(const ::Graphics::LogContext&);
		__zz_cib_new_1 = 1,
		//#= LogContext();
		__zz_cib_new_2 = 2,
		//#= ~LogContext();
		__zz_cib_delete_3 = 3,
		//#= void Line(float, float, float, float);
		Line_4 = 4,
		//#= void Rect(float, float, float, float);
		Rect_5 = 5,
		//#= void Circle(float, float, float);
		Circle_6 = 6,
		//#= void Ellipse(float, float, float, float);
		Ellipse_7 = 7,
		//#= __zz_cib_cast_to___Graphics__Context
		__zz_cib_cast_to___Graphics__Context_8 = 8,
		//#= __zz_cib_release_proxy
		__zz_cib_release_proxy_9 = 9,
		__zz_cib_next_method_id = 10
	};
}}}}

namespace __zz_cib_ { namespace Graphics { namespace LogContext { namespace __zz_cib_GenericProxy { namespace __zz_cib_methodid {
	enum {
		//#= void Line(float, float, float, float);
		Line_1 = 1,
		//#= void Rect(float, float, float, float);
		Rect_2 = 2,
		//#= void Circle(float, float, float);
		Circle_3 = 3,
		//#= void Ellipse(float, float, float, float);
		Ellipse_4 = 4,
		__zz_cib_next_method_id = 5
	};
}}}}}

namespace __zz_cib_ { namespace Graphics { namespace Rectangle { namespace __zz_cib_methodid {
	enum {
		//#= Rectangle(const ::Graphics::Rectangle&);
		__zz_cib_new_1 = 1,
		//#= ~Rectangle();
		__zz_cib_delete_2 = 2,
		//#= Rectangle(float, float, float, float);
		__zz_cib_new_3 = 3,
		//#= float Area() const;
		Area_4 = 4,
		//#= float Perimeter() const;
		Perimeter_5 = 5,
		//#= void Draw(::Graphics::Context*) const;
		Draw_6 = 6,
		//#= __zz_cib_cast_to___Graphics__Shape
		__zz_cib_cast_to___Graphics__Shape_7 = 7,
		//#= __zz_cib_release_proxy
		__zz_cib_release_proxy_8 = 8,
		__zz_cib_next_method_id = 9
	};
}}}}

namespace __zz_cib_ { namespace Graphics { namespace Rectangle { namespace __zz_cib_GenericProxy { namespace __zz_cib_methodid {
	enum {
		//#= float Area() const;
		Area_1 = 1,
		//#= float Perimeter() const;
		Perimeter_2 = 2,
		//#= void Draw(::Graphics::Context*) const;
		Draw_3 = 3,
		__zz_cib_next_method_id = 4
	};
}}}}}

namespace __zz_cib_ { namespace Graphics { namespace Shape { namespace __zz_cib_methodid {
	enum {
		//#= Shape();
		__zz_cib_new_1 = 1,
		//#= float Area() const;
		Area_2 = 2,
		//#= float Perimeter() const;
		Perimeter_3 = 3,
		//#= void Draw(::Graphics::Context*) const;
		Draw_4 = 4,
		//#= ~Shape();
		__zz_cib_delete_5 = 5,
		//#= __zz_cib_get_class_id
		__zz_cib_get_class_id_6 = 6,
		//#= __zz_cib_release_proxy
		__zz_cib_release_proxy_7 = 7,
		__zz_cib_next_method_id = 8
	};
}}}}

namespace __zz_cib_ { namespace Graphics { namespace Shape { namespace __zz_cib_GenericProxy { namespace __zz_cib_methodid {
	enum {
		//#= float Area() const;
		Area_1 = 1,
		//#= float Perimeter() const;
		Perimeter_2 = 2,
		//#= void Draw(::Graphics::Context*) const;
		Draw_3 = 3,
		//#= ~Shape();
		__zz_cib_delete_4 = 4,
		__zz_cib_next_method_id = 5
	};
}}}}}

namespace __zz_cib_ { namespace Point { namespace __zz_cib_methodid {
	enum {
		//#= Point(const ::Point&);
		__zz_cib_new_1 = 1,
		//#= ~Point();
		__zz_cib_delete_2 = 2,
		//#= Point(float, float);
		__zz_cib_new_3 = 3,
		//#= float X() const;
		X_4 = 4,
		//#= void X(float);
		X_5 = 5,
		//#= float Y() const;
		Y_6 = 6,
		//#= void Y(float);
		Y_7 = 7,
		//#= ::Point operator +(const ::Point&) const;
		__zz_cib_OperatorPlus_8 = 8,
		//#= ::Point operator -(::Point) const;
		__zz_cib_OperatorMinus_9 = 9,
		__zz_cib_next_method_id = 10
	};
}}}

